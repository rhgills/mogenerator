desc 'Test all configurations'
task :default do
  clean
  build_mogen
  
  test_all
end

desc "Test all configurations of contributed template: 'Robert Gilliam'"
task :test_robert_gilliam do
  clean
  build_mogen

  test_all(template_robert_gilliam)
end

desc 'Clean output'
task :clean do
  clean
end

def clean
  run_or_die 'rm -rf MOs testbin test.mom'
end

def run_or_die(cmd)
  #puts "*** #{cmd}"
  result = `#{cmd}`
  raise "ERROR: #{cmd} failed" if $?.exitstatus != 0
  result
end

def test_all(template = '')
  test_mrc(template)
  clean
  
  test_mrc_noliterals(template)
  clean
  
  test_arc(template)
  clean
  
  test_arc_noliterals(template)
  clean
end

desc 'Generate, Compile and Run MRC Code (with objc literals)'
task :mrc => :build_mogen do
  test_mrc
end

def test_mrc(args_to_select_template = '')
  test('MRC (with objc literals)', '#{args_to_select_template}', '')
end

desc 'Generate, Compile and Run MRC Code (without objc literals)'
task :mrc_noliterals => :build_mogen  do
  test_mrc_noliterals
end

def test_mrc_noliterals(args_to_select_template = '')
  test('MRC (without objc literals)', '--template-var noliterals=true #{args_to_select_template}', '')
end

desc 'Generate, Compile and Run ARC Code (with objc literals)'
task :arc => :build_mogen  do
  test_arc
end

def test_arc(args_to_select_template = '')
  test('ARC (with objc literals)', '--template-var arc=true #{args_to_select_template}', '-fobjc-arc')
end

desc 'Generate, Compile and Run ARC Code (without objc literals)'
task :arc_noliterals => :build_mogen  do
  test_arc_noliterals
end

def test_arc_noliterals(args_to_select_template = '')
  test('ARC (without objc literals)', '--template-var arc=true --template-var noliterals=true #{args_to_select_template}', '-fobjc-arc')
end

task :build_mogen do
  build_mogen
end

def build_mogen
  puts "*** Clean-building mogenerator"
  build_settings = run_or_die 'xcodebuild -project ../mogenerator.xcodeproj -configuration Debug -showBuildSettings'
  built_products_dir = build_settings.lines.select{|line|line[/\sBUILT_PRODUCTS_DIR\s/]}[0].strip.sub('BUILT_PRODUCTS_DIR = ','')
  run_or_die 'xcodebuild -project ../mogenerator.xcodeproj -scheme mogenerator clean' # need this to pick up template changes
  run_or_die 'xcodebuild -project ../mogenerator.xcodeproj -scheme mogenerator'
  @mogenPath = "#{built_products_dir}/mogenerator"
  puts "*** mogenerator built in #{built_products_dir}"
end

def mogenPath
  @mogenPath
end

def test(desc, extra_mogen_args, extra_gcc_args)
  puts "*** Testing #{desc}"
  ENV['MOMC_NO_INVERSE_RELATIONSHIP_WARNINGS'] = '1'
  run_mogen(extra_mogen_args)
  copy_human_files_into_MOs
  build_test_app(extra_gcc_args)
  compile_xcdatamodel
  run_test_app
end

def run_mogen(extra_mogen_args)
  run_or_die "#{mogenPath.gsub(/ /, '\\ ')} --model test.xcdatamodel --output MOs --baseClass MyBaseClass #{extra_mogen_args}"
end

def copy_human_files_into_MOs
  run_or_die 'cp HumanMO.h HumanMO.m MyProtocol.h MyProtocolImpl.m MOs'
end

def build_test_app(extra_gcc_args)
  run_or_die "clang -o testbin test.m MyBaseClass.m MOs/*.m -I#{Dir.pwd} -framework Foundation -framework Cocoa -framework CoreData #{extra_gcc_args}"
end

def compile_xcdatamodel
  run_or_die "xcrun momc -MOMC_NO_INVERSE_RELATIONSHIP_WARNINGS test.xcdatamodel #{Dir.pwd}/test.mom"
end

def run_test_app
  puts run_or_die './testbin'
end

def template_robert_gilliam
  "--template-path '/Users/rhgill/Code/mogenerator/contributed templates/Robert Gilliam/'"
end
